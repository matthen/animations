namespace Utils {
    export const range = (start: number, end: number, step: number = 1) => {
        const result: number[] = [];
        if (step === 0) {
            throw new Error('Step cannot be zero');
        }
        if (start < end && step < 0) {
            throw new Error('Step must be positive when start is less than end');
        }
        if (start > end && step > 0) {
            throw new Error('Step must be negative when start is greater than end');
        }

        for (let i = start; step > 0 ? i < end : i > end; i += step) {
            result.push(i);
        }

        return result;
    };

    export const circlePoints = ({
        num,
        center = [0, 0],
        radius = 1,
        offset = 0,
    }: {
        num: number;
        center?: number[];
        radius?: number;
        offset?: number;
    }) => {
        const a = (2 * Math.PI) / num;
        return range(0, num).map((i) => [
            center[0] + radius * Math.cos(offset + a * i),
            center[1] + radius * Math.sin(offset + a * i),
        ]);
    };

    export const smoothstep = (t: number, startT: number = 0, endT: number = 1): number => {
        const tt = (t - startT) / (endT - startT);
        if (tt <= 0) {
            return 0;
        }
        if (tt >= 1) {
            return 1;
        }
        return 6 * Math.pow(tt, 5) - 15 * Math.pow(tt, 4) + 10 * Math.pow(tt, 3);
    };

    export const smoothstepI = (t: number, startT: number = 0, endT: number = 1): number => {
        // Integral of smoothstep.
        if ((t - startT) * (startT - endT) > 0) {
            return 0.0;
        }
        if ((t - endT) * (endT - startT) > 0) {
            return 0.5 * (2 * (t - endT) + endT - startT);
        }
        return -(
            (Math.pow(t - startT, 4) *
                (2 * t * t + startT * startT + 2 * t * (startT - 3 * endT) - 4 * startT * endT + 5 * endT * endT)) /
            (2 * Math.pow(startT - endT, 5))
        );
    };

    export interface Transition {
        easing: 'smoothstep' | 'linear' | 'step';
        startT: number;
        endT: number;
        startValue?: number; // May be inferred from context.
        endValue: number;
    }

    const computeEasing = (easing: Transition['easing'], t: number, startT: number, endT: number): number => {
        if (easing == 'smoothstep') {
            return smoothstep(t, startT, endT);
        } else if (easing == 'linear') {
            return (t - startT) / (endT - startT);
        } else if (easing == 'step') {
            return t > (startT + endT) / 2 ? 1 : 0;
        }
        return 0.0; // unreachable
    };

    export const makeTransitionFunction = (transitions: Transition[]): ((t: number) => number) => {
        if (transitions.length == 0) {
            return (_t) => 0;
        }
        transitions.sort((tr1, tr2) => tr1.startT - tr2.startT);

        // Populate the undefined start values.
        const initialValue = transitions[0].startValue || 0.0;
        const finalValue = transitions[transitions.length - 1].endValue;
        let value = initialValue;
        transitions.forEach((tr) => {
            tr.startValue ??= value;
            value = tr.endValue;
        });

        return (t: number) => {
            let i = 0;
            while (i < transitions.length && transitions[i].endT < t) {
                // Could be a binary search but whatever.
                i += 1;
            }
            if (i == transitions.length) {
                return finalValue;
            }
            const tr = transitions[i];
            if (tr.startT < t && t < tr.endT) {
                // compute transition
                const easing = computeEasing(tr.easing, t, tr.startT, tr.endT);
                return tr.startValue! * (1 - easing) + tr.endValue * easing;
            } else if (i == 0) {
                return initialValue;
            } else {
                return transitions[i - 1].endValue;
            }
        };
    };

    export const frac = (t: number): number => {
        // Fractional part of t.
        return t - Math.floor(t);
    };

    export const piDigits =
        '3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361603563707660104710181942955596198946767837449448255379774726847104047534646208046684259069491293313677028989152104752162056966024058038150193511253382430035587640247496473263914199272604269922796782354781636009341721641219924586315030286182974555706749838505494588586926995690927210797509302955321165344987202755960236480665499119881834797753566369807426542527862551818417574672890977772793800081647060016145249192173217214772350141441973568548161361157352552133475741849468438523323907394143334547762416862518983569485562099219222184272550254256887671790494601653466804988627232791786085784383827967976681454100953883786360950680064225125205117392984896084128488626945604241965285022210661186306744278622039194945047123713786960956364371917287467764657573962413890865832645995813390478027590099465764078951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659250937221696461515709858387410597885959772975498930161753928468138268683868942774155991855925245953959431049972524680845987273644695848653836736222626099124608051243884390451244136549762780797715691435997700129616089441694868555848406353422072225828488648158456028506016842739452267467678895252138522549954666727823986456596116354886230577456498035593634568174324112515076069479451096596094025228879710893145669136867228748940560101503308617928680920874760917824938589009714909675985261365549781893129784821682998948722658804857564014270477555132379641451523746234364542858444795265867821051141354735739523113427166102135969536231442952484937187110145765403590279934403742007310578539062198387447808478489683321445713868751943506430218453191048481005370614680674919278191197939952061419663428754440643745123718192179998391015919561814675142691239748940907186494231961567945208095146550225231603881930142093762137855956638937787083039069792077346722182562599661501421503068038447734549202605414665925201497442850732518666002132434088190710486331734649651453905796268561005508106658796998163574736384052571459102897064140110971206280439039759515677157700420337869936007230558763176359421873125147120532928191826186125867321579198414848829164470609575270695722091756711672291098169091528017350671274858322287183520935396572512108357915136988209144421006751033467110314126711136990865851639831501970165151168517143765761835155650884909989859982387345528331635507647918535893226185489632132933089857064204675259070915481416549859461637180270981994309924488957571282890592323326097299712084433573265489382391193259746366730583604142813883032038249037589852437441702913276561809377344403070746921120191302033038019762110110044929321516084244485963766983895228684783123552658213144957685726243344189303968642624341077322697802807318';
}

export default Utils;
